import type { HandlerFunction } from "@octokit/webhooks/dist-types/types";
import type { Context } from "telegraf";
import templite from "templite";

const SEVERITY: Record<string, string> = {
  moderate: "‚ö†Ô∏è Moderate",
  high: "‚ÄºÔ∏è High",
  critical: "‚õî Critical"
};

export function vulnerabilityAlert(
  ctx: Context
): HandlerFunction<"repository_vulnerability_alert.create", unknown> {
  const template = `
<b>üö® New vulnerability alert in <a href="https://github.com/{{repoName}}">{{repoName}}</a></b>

<b>Severity</b>: {{severity}}
<b>Affected Package</b>: {{affectedPackage}}
<b>Affected Range</b>: {{affectedRange}}
<b>Fixed In</b>: {{fixedIn}}
<b>External Reference</b>: <a href="{{externalUrl}}">{{externalRef}}</a>
`;
  return async (event) => {
    const response = templite(template, {
      repoName: event.payload.repository.full_name,
      affectedPackage: event.payload.alert.affected_package_name,
      affectedRange: event.payload.alert.affected_package_name,
      fixedIn: event.payload.alert.fixed_in,
      severity: event.payload.alert.severity
        ? SEVERITY[event.payload.alert.severity]
        : "Not available",
      externalRef: event.payload.alert.external_identifier,
      externalUrl: event.payload.alert.external_reference
    });

    try {
      await ctx.telegram.sendMessage(
        ctx.chat?.id ?? String(process.env.HOME_ID ?? ""),
        response,
        { parse_mode: "HTML", disable_web_page_preview: true }
      );
    } catch (e) {
      console.error(e);
    }
  };
}
