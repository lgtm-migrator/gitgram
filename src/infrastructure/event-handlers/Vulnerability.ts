import type { IVulnerabilityEvent } from "~/application/interfaces/events";
import type { HandlerFunction } from "~/application/webhook/types";
import type { IHub } from "~/application/interfaces/IHub";
import { interpolate } from "~/utils/interpolate";

export type VulnerabilityTemplate = {
  created: {
    severity: Record<string, string>;
    base: string;
  };
};

export class VulnerabilityEventHandler implements IVulnerabilityEvent {
  // eslint-disable-next-line no-useless-constructor
  constructor(private readonly _templates: VulnerabilityTemplate, private readonly _hub: IHub) {}

  created(): HandlerFunction<"repository_vulnerability_alert.create"> {
    return (event) => {
      const response = interpolate(this._templates.created.base, {
        repoName: event.payload.repository.full_name,
        affectedPackage: event.payload.alert.affected_package_name,
        affectedRange: event.payload.alert.affected_package_name,
        fixedIn: event.payload.alert.fixed_in,
        severity: event.payload.alert.severity
          ? this._templates.created.severity[event.payload.alert.severity]
          : "Not available",
        externalRef: event.payload.alert.external_identifier,
        externalUrl: event.payload.alert.external_reference
      });

      this._hub.send({
        targetsId: event.targetsId,
        payload: response
      });
    };
  }
}
