import type { HandlerFunction } from "@octokit/webhooks/dist-types/types";
import { HOME_GROUP } from "env";
import type { Context } from "grammy";
import type { IVulnerabilityEvent } from "src/application/interfaces/events";
import templite from "templite";

export class VulnerabilityEventHandler implements IVulnerabilityEvent {
  private readonly SEVERITY: Record<string, string> = {
    moderate: "‚ö†Ô∏è Moderate",
    high: "‚ÄºÔ∏è High",
    critical: "‚õî Critical"
  };

  created(ctx: Context): HandlerFunction<"repository_vulnerability_alert.create", unknown> {
    const template = `
    <b>üö® New vulnerability alert in <a href="https://github.com/{{repoName}}">{{repoName}}</a></b>
    
    <b>Severity</b>: {{severity}}
    <b>Affected Package</b>: {{affectedPackage}}
    <b>Affected Range</b>: {{affectedRange}}
    <b>Fixed In</b>: {{fixedIn}}
    <b>External Reference</b>: <a href="{{externalUrl}}">{{externalRef}}</a>
    `;
    return async (event) => {
      const response = templite(template, {
        repoName: event.payload.repository.full_name,
        affectedPackage: event.payload.alert.affected_package_name,
        affectedRange: event.payload.alert.affected_package_name,
        fixedIn: event.payload.alert.fixed_in,
        severity: event.payload.alert.severity ? this.SEVERITY[event.payload.alert.severity] : "Not available",
        externalRef: event.payload.alert.external_identifier,
        externalUrl: event.payload.alert.external_reference
      });

      try {
        await ctx.api.sendMessage(ctx.chat?.id ?? HOME_GROUP, response, {
          parse_mode: "HTML",
          disable_web_page_preview: true
        });
      } catch (e) {
        console.error(e);
      }
    };
  }
}
