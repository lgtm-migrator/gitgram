import type { HandlerFunction } from "@octokit/webhooks/dist-types/types";
import type { Context } from "grammy";
import templite from "templite";
import { HOME_GROUP } from "~/env";
import type { IVulnerabilityEvent } from "~/application/interfaces/events";

export type VulnerabilityTemplate = {
  created: {
    severity: Record<string, string>;
    base: string;
  };
};

export class VulnerabilityEventHandler implements IVulnerabilityEvent {
  // eslint-disable-next-line no-useless-constructor
  constructor(private readonly _templates: VulnerabilityTemplate) {}

  created(ctx: Context): HandlerFunction<"repository_vulnerability_alert.create", unknown> {
    return async (event) => {
      const response = templite(this._templates.created.base, {
        repoName: event.payload.repository.full_name,
        affectedPackage: event.payload.alert.affected_package_name,
        affectedRange: event.payload.alert.affected_package_name,
        fixedIn: event.payload.alert.fixed_in,
        severity: event.payload.alert.severity
          ? this._templates.created.severity[event.payload.alert.severity]
          : "Not available",
        externalRef: event.payload.alert.external_identifier,
        externalUrl: event.payload.alert.external_reference
      });

      try {
        await ctx.api.sendMessage(ctx.chat?.id ?? HOME_GROUP, response, {
          parse_mode: "HTML",
          disable_web_page_preview: true
        });
      } catch (e) {
        // TODO: proper logging
        console.error(e);
      }
    };
  }
}
